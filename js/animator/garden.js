// Generated by CoffeeScript 1.3.3
(function() {
  "use strict";

  var Canvas, Control_Point, Emotion_Flower, Emotion_List, Emotions_Panel, Keyframe_Marker, Page, Project, Properties_Panel, Scene, Scene_Item, Scene_Panel, Timeline_Graph, Timeline_Marker, Timeline_Panel, Timeline_Status_Bar;

  MetaHub.import_all();

  Bloom.import_all();

  Breeze.import_all();

  Page = window.Page = {
    iris_properties: {
      "position.x": "double",
      "position.y": "double",
      rotate: "double",
      "scale.x": "double",
      "scale.y": "double",
      "anchor.x": "double",
      "anchor.y": "double"
    },
    history: [],
    project: null,
    initialize: function() {
      Breeze.animator.initialize_more();
      this.menu = this.create_menu();
      this.timeline = Timeline_Panel.create();
      $(".timeline.panel").append(this.timeline.element);
      this.timeline.graph.update();
      this.keyboard_actions();
      this.initialize_project_panel();
      this.properties = Properties_Panel.create();
      $(".properties.panel").append(this.properties.element);
      return this.load_iris("deevee3.svg");
    },
    initialize_project_panel: function() {
      var emotions, scene;
      this.project_panel = Tab_Panel.create();
      $(".project.panel").append(this.project_panel.element);
      scene = Scene_Panel.create();
      scene.title = "Scene";
      emotions = Emotions_Panel.create(Breeze.animator);
      emotions.title = "Emotions";
      this.project_panel.connect(scene, "child", "parent");
      this.project_panel.connect(emotions, "child", "parent");
      return this.project_panel.set_tab(scene);
    },
    create_canvas: function() {
      var canvas, self;
      self = this;
      Breeze.animator.items = [];
      if (this.canvas) {
        this.canvas.disconnect_all();
      }
      canvas = $("#canvas");
      canvas.empty();
      this.canvas = Canvas.create(canvas);
      this.connect(this.canvas, "child", "parent");
      this.canvas.iris.layers[0].setAttribute("transform", "scale(0.8, 0.8) translate(200, 0)");
      return this.canvas.iris.layers[1].setAttribute("transform", "scale(0.8, 0.8) translate(200, 0)");
    },
    create_menu: function() {
      var menu;
      menu = Menu.create();
      $("body").prepend(menu.element);
      menu.target = Page;
      return menu;
    },
    keyboard_actions: function() {
      return $(window).keypress(function(event) {
        var channels, control, index, item, selection, used, _i, _len;
        control = event.metaKey || event.ctrlKey;
        used = true;
        console.log("charCode: " + event.charCode + ", keyCode: " + event.keyCode);
        switch (event.charCode) {
          case 32:
            event.preventDefault();
            if (Breeze.animator.is_playing) {
              Breeze.animator.stop();
            } else {
              Breeze.animator.play(Breeze.animator.frame);
            }
            break;
          case 91:
            Page.timeline.graph.goto_previous_key();
            event.preventDefault();
            break;
          case 93:
            Page.timeline.graph.goto_next_key();
            event.preventDefault();
            break;
          case 100:
            Page.timeline.graph.delete_selection();
            break;
          case 105:
            selection = Page.selection();
            for (_i = 0, _len = selection.length; _i < _len; _i++) {
              item = selection[_i];
              Breeze.animator.add_key(item);
            }
            break;
          case 112:
            channels = Breeze.animator.active_channels;
            index = channels.indexOf("path");
            if (index === -1) {
              channels.push("path");
            } else {
              channels.splice(index, 1);
            }
            break;
          case 122:
            control;

            break;
          default:
            used = false;
        }
        if (used) {
          return;
        }
        switch (event.keyCode) {
          case 33:
            Page.timeline.graph.goto_previous_key();
            event.preventDefault();
            break;
          case 34:
            Page.timeline.graph.goto_next_key();
            event.preventDefault();
            break;
          default:
            return;
        }
        return event.preventDefault();
      });
    },
    load: function() {
      var blocks;
      Block.source_path = "html";
      blocks = ["emotions", "timeline", "menu", "properties", "scene", "tab-panel", "text-field"];
      Ground.add("block", blocks, Block.load);
      return Ground.fertilize(function() {
        if (window.UNIT_TEST === undefined) {
          return Page.initialize();
        } else {
          return run_tests();
        }
      });
    },
    load_iris: function(filename) {
      var self;
      self = this;
      return jQuery.get("projects/" + filename, (function(response) {
        self.create_canvas();
        self.canvas.load(response);
        self.invoke("load", Page.canvas.iris);
        return jQuery.get("projects/" + "deevee.brz", (function(response2) {
          Breeze.animator.load(response2, self.canvas.iris);
          Breeze.animator.emotion_selection.connect(Breeze.animator.emotions[0], "selected", "selection");
          if (Breeze.animator.emotions.length > 0) {
            return Breeze.animator.value("current_emotion", Breeze.animator.emotions[0]);
          }
        }), "json");
      }), "xml");
    },
    new_iris: function() {
      return this.create_canvas();
    },
    save_iris: function(filename) {
      var data;
      filename = filename || "deevee.brz";
      data = {
        data: JSON.stringify(this.save_animation()),
        filename: filename
      };
      return Bloom.post("server/store-iris.php", data, function() {});
    },
    save_animation: function() {
      var animator, emotion, emotions, result, _i, _len, _ref;
      emotions = [];
      animator = Breeze.animator;
      result = {};
      _ref = animator.emotions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        emotion = _ref[_i];
        emotions.push(emotion.save());
      }
      result.emotions = emotions;
      return result;
    },
    selection: function() {
      return this.get_connections("selected");
    }
  };

  $(function() {
    MetaHub.metanize(Page);
    return Page.load();
  });

  Scene = Meta_Object.sub_class("Scene", {
    initialize: function() {
      return this.scene.optimize_getter("children", "child");
    }
  });

  Project = Meta_Object.sub_class("Project", {
    initialize: function() {
      return this.scene = Scene.create();
    }
  });

  Scene_Item = Flower.sub_class("Scene_Item", {
    initialize: function() {
      return this.element = $("<li>" + this.seed.element.id + "</li>");
    }
  });

  Scene_Panel = Tree.sub_class("Scene_Panel", {
    block: "scene",
    item_type: Scene_Item,
    initialize: function() {
      this.listen(Page, "load", this.load);
      return this.make_selectable(Page);
    },
    load: function(iris) {
      this.element.empty();
      return this.watch_seed("child", iris.root);
    }
  });

  new Block("emotion", "<li></li>");

  Emotion_Flower = Flower.sub_class("Emotion_Flower", {
    block: "emotion",
    initialize: function() {
      var self;
      self = this;
      this.element.text(this.seed.name);
      return this.element.dblclick(function() {
        return Bloom.edit_text(self.element, function(value) {
          return self.seed.name = value;
        });
      });
    }
  });

  Emotion_List = List.sub_class("Emotion_List", {
    block: "list",
    item_type: Emotion_Flower,
    initialize: function() {
      this.make_selectable(Breeze.animator.emotion_selection);
      return this.watch_seed("emotion");
    }
  });

  Emotions_Panel = Flower.sub_class("Emotions_Panel", {
    block: "emotions",
    initialize: function() {
      var self;
      self = this;
      this.list = Emotion_List.create(this.seed, this.element.find(".item-list"));
      return this.element.find(".buttons li").click(function() {
        return Breeze.animator.create_emotion();
      });
    }
  });

  Control_Point = Circle.sub_class("Control_Point", {
    cps: [],
    initialize: function() {
      var element;
      element = this.element;
      element.setAttribute("stroke", "black");
      element.setAttribute("stroke-width", "2");
      element.setAttribute("fill", "red");
      this.listen(this, "connect.parent", this.initialize_dragging);
      this.listen(this, "connect.source", function() {
        var source;
        source = this.get_connection("source");
        return this.attr("transform", source.attr("transform"));
      });
      return this.listen(Breeze.animator, "update", function() {
        this.element.setAttribute("cx", this.point.x);
        return this.element.setAttribute("cy", this.point.y);
      });
    },
    initialize_dragging: function() {
      var self;
      self = this;
      this.element.addEventListener("click", function(event) {
        return event.stopPropagation();
      });
      return this.drag((function(event) {
        var point, source;
        point = Page.canvas.iris.convert_client_point(event.clientX, event.clientY);
        source = self.get_connection("source");
        point = source.convert_to_local(point);
        return self.move(point.x, point.y);
      }), function(event) {
        var source;
        source = self.get_connection("source");
        if (Breeze.animator.is_recording) {
          return Breeze.animator.add_key(source, "path");
        }
      });
    },
    move: function(x, y) {
      this.point.x = x;
      this.point.y = y;
      this.element.setAttribute("cx", x);
      this.element.setAttribute("cy", y);
      return this.get_connection("source").set_path();
    }
  });

  Canvas = Flower.sub_class("Canvas", {
    initialize: function() {
      var height, width;
      width = this.element.width();
      height = this.element.height();
      this.iris = Iris.create(this.element[0], width, height);
      this.listen(this.iris, "connect.object", this.initialize_petal);
      this.listen(Page, "connect.selected", this.petal_selected);
      this.listen(Page, "disconnect.selected", this.petal_deselected);
      this.listen(this, "disconnect-all", function() {
        return this.iris.disconnect_all();
      });
      return this.element.click(function() {
        return Page.disconnect_all("selected");
      });
    },
    initialize_petal: function(petal) {
      this.listen(petal, "click", function() {
        Page.disconnect_all("selected");
        return Page.connect(petal, "selected", "selection");
      });
      return petal.initialize_more();
    },
    create_control_point: function(petal, point, size) {
      var cp;
      cp = Control_Point.create(point.x, point.y, size);
      this.iris.connect(cp, "overlay", "parent");
      petal.connect(cp, "overlay", "source");
      cp.point = point;
      return cp;
    },
    load: function(data) {
      return this.iris.load_data(data);
    },
    petal_deselected: function(petal) {
      return petal.get_connections("overlay").forEach(function(cp) {
        return cp.disconnect_all();
      });
    },
    petal_selected: function(petal) {
      var child, control_point, cp, point, _i, _len, _ref, _results;
      if (petal.points) {
        _ref = petal.points;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          cp = this.create_control_point(petal, point, 4);
          if (point.cps) {
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = point.cps;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                control_point = _ref1[_j];
                child = this.create_control_point(petal, control_point, 2);
                _results1.push(cp.cps.push(child));
              }
              return _results1;
            }).call(this));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    }
  });

  Timeline_Marker = Flower.sub_class("Timeline_Marker", {
    initialize: function() {
      return this.element = $("<div class=\"marker\"></div>");
    },
    update_position: function() {
      var x;
      x = this.frame * this.parent().element.width() / Breeze.animator.duration;
      return this.element.css("margin-left", x);
    },
    set_position: function(frame) {
      this.frame = frame;
      return this.update_position();
    }
  });

  Keyframe_Marker = Timeline_Marker.sub_class("Keyframe_Marker", {
    keys: [],
    initialize: function() {
      this.drag({
        owner: this,
        moving: this.move_position
      });
      this.click(this.move_position);
      this.listen(this, "connect.selection", function() {
        return this.element.addClass("selected");
      });
      return this.listen(this, "disconnect.selection", function() {
        return this.element.removeClass("selected");
      });
    },
    move_position: function(event) {
      var frame, key, x, _i, _len;
      x = event.clientX - this.element.parent().offset().left;
      x = Math.max(0, x);
      frame = Math.round(x * Breeze.animator.duration / this.element.parent().width());
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        key.frame = frame;
      }
      this.set_position(frame);
      event.bubbles = false;
      event.stopPropagation();
      this.parent().selection.disconnect_all();
      this.parent().selection.connect(this, "selected", "selection");
      return Breeze.animator.update();
    }
  });

  Timeline_Graph = Flower.sub_class("Timeline_Graph", {
    initialize: function() {
      Breeze.animator.set_frame(30);
      this.position = this.add_marker("current", Breeze.animator.frame);
      this.selection = Meta_Object.create();
      this.connect(this.selection, "selection", "parent");
      this.listen(Breeze.animator, "update", function() {
        return this.position.set_position(Breeze.animator.frame);
      });
      this.listen(Page, "connect.selected", this.petal_selected);
      this.listen(Page, "disconnect.selected", this.petal_deselected);
      this.click(function() {
        return this.selection.disconnect_all("selected");
      });
      this.listen(Breeze.animator, "change.current_emotion", this.update_keyframes);
      return this.listen(Breeze.animator, "change.duration", this.update_marker_positions);
    },
    add_marker: function(type, frame) {
      var marker;
      marker = Timeline_Marker.create();
      marker.element.addClass(type);
      this.connect(marker, type, "parent");
      if (typeof frame === "number") {
        marker.set_position(frame);
      }
      return marker;
    },
    add_keyframe_marker: function(key, target) {
      var marker;
      marker = this.get_keyframe(key.frame);
      if (!marker) {
        marker = Keyframe_Marker.create();
      }
      marker.element.addClass("keyframe");
      this.connect(marker, "keyframe", "parent");
      marker.set_position(key.frame);
      marker.keys.push(key);
      this.element.append(marker.element);
      return marker.connect(target, "source", "timeline_marker");
    },
    change_position: function(event) {
      var x;
      x = event.clientX - this.element.offset().left;
      x = Math.max(0, x);
      Breeze.animator.set_frame(x * Breeze.animator.duration / this.element.width());
      return this.position.set_position(Breeze.animator.frame);
    },
    delete_selection: function() {
      var marker, selected, source, y, _i, _len;
      y = void 0;
      selected = this.selection.get_connections("selected");
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        marker = markers[_i];
        source = marker.get_connection("source");
        y = 0;
        while (y < marker.keys.length) {
          source.remove_key(marker.keys[y]);
          y++;
        }
        marker.disconnect_all();
      }
      return Breeze.animator.update();
    },
    get_keyframe: function(frame) {
      var marker, markers, x, _i, _len;
      markers = this.get_connections("keyframe");
      x = 0;
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        marker = markers[_i];
        if (markers[x].frame === frame) {
          return markers[x];
        }
      }
      return null;
    },
    goto_previous_key: function() {
      var frame, marker, markers, x;
      frame = Breeze.animator.frame;
      markers = this.get_connections("keyframe");
      if (markers.length === 0 || markers[0].frame > frame) {
        Breeze.animator.set_frame(0);
        return;
      }
      marker = markers[0];
      x = 1;
      while (x < markers.length) {
        if (markers[x].frame >= frame) {
          break;
        } else {
          marker = markers[x];
        }
        x++;
      }
      return Breeze.animator.set_frame(marker.frame);
    },
    goto_next_key: function() {
      var frame, marker, markers, x;
      frame = Breeze.animator.frame;
      markers = this.get_connections("keyframe");
      if (markers.length === 0 || markers[markers.length - 1].frame < frame) {
        Breeze.animator.set_frame(Breeze.animator.duration - 1);
        return;
      }
      marker = markers[markers.length - 1];
      x = markers.length - 2;
      while (x >= 0) {
        if (markers[x].frame <= frame) {
          break;
        } else {
          marker = markers[x];
        }
        x--;
      }
      return Breeze.animator.set_frame(marker.frame);
    },
    petal_selected: function(petal) {
      var targets;
      targets = petal.get_connections("animation");
      this.listen(petal, "add.key", this.add_keyframe_marker);
      return this.update_keyframes();
    },
    petal_deselected: function(petal) {
      var marker, markers, _i, _len, _ref, _results;
      markers = this.get_connections("keyframe");
      _ref = markers.length;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        if (marker.get_connection("source").seed === petal) {
          _results.push(marker.disconnect_all());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    update: function() {
      var parent;
      this.range = Flower.create(this.element.parent().find(".range"));
      this.range.click(this.change_position, this);
      this.range.drag({
        owner: this,
        moving: this.change_position
      });
      parent = this.element.parent();
      parent.append(this.position.element);
      this.position.set_position(Breeze.animator.frame);
      return this.position.element.height(this.element.height() + parent.find('.range').height() + 1);
    },
    update_keyframes: function() {
      var channel, channels, emotion, item, key, selection, _i, _len, _results;
      emotion = Breeze.animator.current_emotion;
      this.disconnect_all("keyframe");
      if (!emotion) {
        return;
      }
      selection = Page.selection();
      _results = [];
      for (_i = 0, _len = selection.length; _i < _len; _i++) {
        item = selection[_i];
        channels = emotion.get_petal_targets(item);
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = channels.length; _j < _len1; _j++) {
            channel = channels[_j];
            _results1.push((function() {
              var _k, _len2, _ref, _results2;
              _ref = channel.keys;
              _results2 = [];
              for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
                key = _ref[_k];
                _results2.push(this.add_keyframe_marker(key, channel));
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    },
    update_marker_positions: function() {
      var marker, markers, _i, _len;
      markers = this.get_connections("keyframe");
      for (_i = 0, _len = markers.length; _i < _len; _i++) {
        marker = markers[_i];
        update_position(marker);
      }
      return this.position.set_position(Breeze.animator.frame);
    }
  });

  Timeline_Status_Bar = Flower.sub_class("Timeline_Status_Bar", {
    initialize: function() {
      var duration, recording;
      recording = this.element.find(".live");
      recording.click(function() {
        recording.toggleClass("active");
        return Breeze.animator.is_recording = recording.hasClass("active");
      });
      duration = this.element.find(".duration input");
      Bloom.bind_input(duration, Breeze.animator, "duration", this);
      return this.element.find(".play").click(function() {
        return Breeze.animator.play(Breeze.animator.frame);
      });
    }
  });

  Timeline_Panel = Flower.sub_class("Timeline_Panel", {
    block: "timeline",
    initialize: function() {
      this.graph = Timeline_Graph.create(this.element.find(".graph"));
      return this.status_bar = Timeline_Status_Bar.create(this.element.find(".status-bar"));
    }
  });

  Properties_Panel = Editor.sub_class("Properties_Panel", {
    block: "properties",
    initialize: function() {
      this.listen(Page, "connect.selected", this.petal_selected);
      this.listen(Page, "disconnect.selected", this.petal_deselected);
      return this.listen(this, "connect.child", this.field_added);
    },
    field_added: function(field) {
      var live, name;
      name = field.seed.name;
      if (name === "path" || Page.iris_properties[name]) {
        live = field.element.find(".live");
        if (Breeze.animator.active_channels.indexOf(name) !== -1) {
          live.addClass("active");
        }
        return live.click(function() {
          live.toggleClass("active");
          if (live.hasClass("active")) {
            return Breeze.animator.active_channels.push(name);
          } else {
            return Breeze.animator.active_channels.splice(name, 1);
          }
        });
      }
    },
    petal_selected: function(petal) {
      return this.set_seed(petal, Page.iris_properties);
    },
    petal_deselected: function() {
      return this.empty();
    }
  });

}).call(this);
